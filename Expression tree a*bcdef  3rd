#include <iostream>
#include <stack>
using namespace std;

bool isOperator(char x)
{
	switch (x) {
	case '+':
	case '-':
	case '/':
	case '*':
		return true;
	}
	return false;
}

string preToPost(string pre_exp)
{

	stack<string> s;
	int length = pre_exp.size();

	for (int i = length - 1; i >= 0; i--)
	{
		if (isOperator(pre_exp[i]))
		{
			string op1 = s.top();
			s.pop();
			string op2 = s.top();
			s.pop();
			string temp = op1 + op2 + pre_exp[i];

			s.push(temp);
		}

		else {

			s.push(string(1, pre_exp[i]));
		}
	}

	return s.top();
}

int main()
{
	string pre_exp ;
    cout<<"Enter the prefix expression :";
    cin>>pre_exp;
	cout << "Postfix : " << preToPost(pre_exp);
	return 0;
}



             Algorithm

We read our expression one symbol at a time. If the symbol is an operand, we create a one node tree & push a pointer to if into a stack. If the symbol is an operator,
we pop pointer to two tree T2 & T, from the stakc & form a new tree whose root is the operator & whose left and right children point to T1 & T2 respectively. A pointer
to this new tree is then pushed onto the stack
    As a example. suppose the input is abc*+e*f*
    1) the first three symbols are operand, so we create one node trees push pointers to them onto a stack
    2)Next, 4* is read, so two pointers to tree are popped, a new tree is formed, and a pointer to it is [ushede onto the stack
    3)Next, a + is read, so two pointer to tree are popped , a new tree is formed , and a pointer to it is pushed onto the stack
    4)Next, e is read, a one node tree is created & a pointer to it is pushed on to the stack
    5)Next, a =* is read, so two pointers to tree are popped, a net tree is formned & a pointer to it is pushed onto the stack
    6)Continuing f is read , a one node tree is created & a pointer to it is pushed onto the stack
    7)Finaly, a+ is read, two trees are mergfed, & a pointer to the final tree is pushed on the stack
